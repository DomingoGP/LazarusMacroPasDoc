// Lazarus editor macro.  Template for pasdoc functions and procedures documentation
// Execute with caret in the precedure/function line declaration.
// Autor: Domingo Galmés  dgalmesp@gmail.com  21/08/2020
// public domain.

// aLineNum 1..nnn
// Caller.Lines[0...nnn-1]
function GetLine(aLineNum:integer):string;
begin
  result:=Caller.Lines[aLineNum-1];
end;

function StrTokenPos(const aStr: string; const aDelimiters: string;var aPos:integer): string;
var
  wI: integer;
  wL: integer;
  wStart: integer;
begin
  wL := Length(aStr);
   //skip delimiters
  wI := aPos;
  while wI <= wL do
  begin
    if Pos(aStr[wI],aDelimiters) = 0 then
      break;
    Inc(wI);
  end;
  if wI > wL then // all chars are delimiters
  begin
    Result := '';
    aPos := 0;
    Exit;
  end;
  wStart := wI;
  while wI <= wL do // while not delimiters
  begin
    if Pos(aStr[wI],aDelimiters) > 0 then
      Break;
    Inc(wI);
  end;
  result := Copy(aStr, wStart, wI - wStart);
  Inc(wI);   //skip final delimiter (only one)
  if wI<=wL then
    aPos:=wI
  else
    aPos:=0;
end;

function ScanFunctionProcedure(const aY:integer;var aLineOffset:integer;var aFnName:string;var aFnParameters:string;var aIsFunction:boolean):boolean;
var
  wSourceLine:string;
  wAux:string;
  wInComment:boolean;
  wInSet:boolean;
  wOpenParens:integer;
  wLen,wPos:integer;
begin
  result:=false;
  wSourceLine:=GetLine(aY+aLineOffset);
  wPos:=1;
  wAux:=LowerCase(StrTokenPos(wSourceLine,' ',wPos));
  if wAux='class' then
    wAux:=LowerCase(StrTokenPos(wSourceLine,' ',wPos));
  aIsFunction:=false;
  if wAux='function' then
  begin
    result:=true;
    aIsFunction:=true;
  end
  else if wAux='operator' then
  begin
    result:=true;
    aIsFunction:=true;
  end
  else if wAux='constructor' then
    result:=true
  else if wAux='destructor' then
    result:=true
  else if wAux='procedure' then
    result:=true;

  if result=true then
  begin
    // search '(' parameters start
    wOpenParens:=0;
    wLen:=length(wSourceLine);
    //wPos:=1;
    aFnName:='';
    while wPos<=wLen do
    begin
      if wSourceLine[wPos]='(' then
      begin
        Inc(wOpenParens);
        inc(wPos);
        break;
      end;
      if (wSourceLine[wPos]<>':') and (wSourceLine[wPos]<>';') then
      begin
        aFnName:=aFnName+wSourceLine[wPos];
      end
      else
      begin
        inc(wPos);
        break;
      end;
      inc(wPos);
    end;
    aFnName:=Trim(aFnName);
    // seachr ')' parameters end
    wInComment:=false;
    wInSet:=false;
    while wPos<=wLen do
    begin
      if wSourceLine[wPos]=#39 then  // 'in string'.
      begin
        inc(wPos);
        while (wPos<=wLen) do
        begin
          if wSourceLine[wPos]=#39 then
          begin
            if (wPos<wLen) and (wSourceLine[wPos+1]=#39) then   // escape '
              inc(wPos)
            else
              break;
          end;
          inc(wPos);
        end;
      end
      else if (wSourceLine[wPos]='{') then
          wInComment:=true
      else if wInComment=true then
      begin
        if wSourceLine[wPos]='}' then
          wInComment:=false;
      end
      else if (wSourceLine[wPos]='[') then
          wInSet:=true
      else if wInSet=true then
      begin
        if wSourceLine[wPos]=']' then
          wInSet:=false;
      end
      else if wSourceLine[wPos]='(' then
      begin
        Inc(wOpenParens);
      end
      else if wSourceLine[wPos]=')' then
      begin
        Dec(wOpenParens);
        if wOpenParens=0 then
          break;
      end
      else if wSourceLine[wPos]=':' then
      begin
         if wOpenParens=0 then
           break;
         if wOpenParens=1 then
           aFnParameters:=aFnParameters+':';
      end
      else if wSourceLine[wPos]=';' then
      begin
         if wOpenParens=0 then
           break;
         if wOpenParens=1 then
           aFnParameters:=aFnParameters+';';
      end
      else if wSourceLine[wPos]='/'  then  //aLineOffset comment
      begin
        if (wPos<wLen) and (wSourceLine[wPos+1]='/') then
        begin
          wPos:=wLen+1;  //next aLineOffset.
        end;
      end
      else
      begin
        if wOpenParens=1 then
          aFnParameters:=aFnParameters+wSourceLine[wPos];
      end;
      inc(wPos);
      if wPos>wLen then
      begin
        //TODO: CONTROL end of file and break loop.
        inc(aLineOffset);
        wSourceLine:=GetLine(aY+aLineOffset);
        wLen:=length(wSourceLine);
        wPos:=1;
      end;
    end;
  end;
end;

var
  text:string;
  start:TPoint;
  declaration:string;
  p:integer;
  l,line:integer;
  isFunction:boolean;
  parameter,parameterlower:string;
  fnName:string;
  fnParameters:string;
begin
  ecLineStart;
  start:=Caller.CaretXY;

  line:=0;
  if ScanFunctionProcedure(start.Y,line,FnName,fnParameters,isFunction)=true then
  begin
    // separamos fnParameters por , o ; y despreciamos despues de :
    //{fnParameters: aV1,aV2,aV3:integer;const aS1:string= }
    //procedure Hola2(aV1,aV2,aV3:integer;const aS1:string='27');
    text:='{ Description '+#10;
    p:=1;
    while p>0 do
    begin
      parameter:=StrTokenPos(fnParameters,',;',p);
      l:=1;
      parameter:=Trim(StrTokenPos(parameter,':',l));
      parameterlower:=LowerCase(parameter);
      l:=length(parameter);
      if Pos('var',parameterlower)>0 then
        parameter:=Copy(parameter,5,l-4)
      else if Pos('constref',parameterlower)>0 then
        parameter:=Copy(parameter,10,l-9)
      else if Pos('const',parameterlower)>0 then
        parameter:=Copy(parameter,7,l-6)
      else if Pos('out',parameterlower)>0 then
        parameter:=Copy(parameter,5,l-4);
      parameter:=Trim(parameter);
      if parameter<>'' then
        text:=text+'  @param('+parameter+' description )'+#10;
    end;
    if isFunction then
      text:=text+'  @returns( description )'+#10;
    text:=text+'  @raises( none )'+#10;
    text:=text+'}'+#10;
    start.X:=0;
    Caller.CaretXY:=start;
    Caller.insertTextAtCaret(text,scamEnd);
  end;
end.