// Adapt function/procedure declaration for dynamic loading or not.
// function Foo(aP1:integer):integer;external LibFileName;
// -->
//{$IFDEF LD}var{$ELSE}function{$ENDIF} Foo{$IFDEF LD}: function{$ENDIF}(aP1:integer):integer;{$IFNDEF LD} external LibFileName;{$ENDIF}
// Author: Domingo GalmÃ©s  15/4/2023


// aLineNum 1..nnn
// Caller.Lines[0...nnn-1]
function GetLine(aLineNum:integer):string;
begin
  result:=Caller.Lines[aLineNum-1];
end;

//select full lines.
procedure GetSelectedBlockFullLines(var aP1:TPoint;var aP2:TPoint);
begin
  aP1 := Caller.BlockBegin;
  aP2 := Caller.BlockEnd;
  if (aP1.y > aP2.y) then
  begin
    aP1 := Caller.BlockEnd;
    aP2 := Caller.BlockBegin;
  end;
  if aP2.x<=1 then
  begin
    if aP2.y>1 then
      aP2.y:=aP2.y-1;
  end;
  aP2.x:=Length(Caller.Lines[aP2.y-1])+1;   //last char
  aP2:=Caller.PhysicalToLogicalPos(aP2);
  aP1.x:=1;
end;

function PosEx(aSub:string;aStr:string;aIndex:integer):integer;
var
  wI,wI2:integer;
  wJ:integer;
  wLS,wLS2,wLSub:integer;
begin
  result:=-1;
  wLS:=length(aStr);
  wLSub:=length(aSub);
  if aSub='' then
    Exit;
  if wLSub>wLS then
    Exit;
  wLS2:=wLS-wLSub+1;
  for wI := aIndex to wLS2 do
  begin
    wJ:=1;
    wI2:=wI;
    while (wI2<=wLS) and (wJ<=wLSub) and (aStr[wI2]=aSub[wJ]) do
    begin
      if wJ=wLSub then
      begin
        result:=wI;
        exit;
      end;
      inc(wI2);
      inc(wJ);
    end;
  end;
end;

var
  wP1,wP2:TPoint;
  wNumLines:integer;
  wI,wI2,wL:integer;
  wText,wR:string;
  wLine:string;
  wTemp:string;
  wPos1,wPos2:integer;
  wTipo:string;

begin
  if not Caller.SelAvail then
    exit;
  GetSelectedBlockFullLines(wP1,wP2);
  Caller.BlockBegin:=wP1;
  Caller.BlockEnd:=wP2;
  wNumLines:=wP2.y-wP1.y+1;
  wText:='';
  for wI:=0 to wNumLines-1 do
  begin
    wLine:= GetLine(wP1.y+wI);
    wR:='';
    wL:=length(wLine);
    if wL=0 then
    begin
      wText:=wText+#10;
      continue;
    end;
    wI2:=1;
    while (wI2<=wL) and (wLine[wI2] in [' ',#9]) do
      inc(wI2);
    if (wI2<=wL) then
    begin
      wTipo:='';
      if Pos('function',wLine)=wI2 then
      begin
        wTipo:='function';
      end
      else
      if Pos('procedure',wLine)=wI2 then
      begin
        wTipo:='procedure';
      end;
      wI2:=wI2 + length(wTipo);
      if wTipo<>'' then
      begin
        wR:='{$IFDEF LD}var{$ELSE}'+wTipo+'{$ENDIF}';
        // nombre funcion/procedure hasta encontrar '(', ':' o ';')
        while (wI2<=wL) and (not (wLine[wI2] in ['(',':',';'])) do
        begin
          wR:=wR+wLine[wI2];
          inc(wI2);
        end;
        wR:=wR+'{$IFDEF LD}: '+wTipo+'{$ENDIF}';
      end;
      wPos2:=PosEx('external',wLine,wI2);
      if wPos2>0 then
      begin
        while (wI2<wPos2) do
        begin
          wR:=wR+wLine[wI2];
          inc(wI2);
        end;
        wR:=wR+'{$IFNDEF LD}';
        while (wI2<=wL) do
        begin
          wR:=wR+wLine[wI2];
          if wLine[wI2]=';' then
          begin
            inc(wI2);
            break;
          end;
          inc(wI2);
        end;
        wR:=wR+'{$ENDIF}';
      end;
      //copy until end of line.
      while (wI2<=wL) do
      begin
        wR:=wR+wLine[wI2];
        inc(wI2);
      end;
      wText:=wText+wR+#10;
    end
    else
    begin
      wText:=wText+wLine+#10;
    end;
  end;
  if length(wText)>0 then
    wText:=Copy(wText,1,length(wText)-1); // remove last #10
  //ShowMessage(wText);
  //ClipBoard.AsText:=wText;
  //replace selected text
  Caller.TextBetweenPoints[wP1,wP2]:=wText;
end.